"""
Django settings for webChatBot project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from django.templatetags.static import static
import os
from django.utils.translation import gettext_lazy as _
from django.urls import reverse_lazy

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dsplaksi$mptg$%6ufuh44i+lj=-d^7vm1g^^2md^##9qy#!v+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'unfold',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'colorfield',
    'django_celery_results',
    'accounts',
    'subscriptions',
    'chatbots',
    'core',
]

AUTH_USER_MODEL = 'accounts.User'

MIDDLEWARE = [
    'core.middleware.DomainRestrictionMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:5500"
]

ROOT_URLCONF = 'webChatBot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'webChatBot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:8000",
    "http://localhost:5500"
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True

UNFOLD = {
    "SITE_TITLE": "Web ChatBot",
    "SITE_HEADER": "Web ChatBot",
    "SITE_URL": "/dashboard/",
    # "SITE_SUBHEADER": "Appears under SITE_HEADER",
    "SITE_ICON": lambda request: static("logo.png"),
    "SHOW_VIEW_ON_SITE": False,
    "COLORS": {
        "primary": {
            "50": "250 245 255",
            "100": "243 232 255",
            "200": "233 213 255",
            "300": "216 180 254",
            "400": "192 132 252",
            "500": "168 85 247",
            "600": "147 51 234",
            "700": "126 34 206",
            "800": "107 33 168",
            "900": "88 28 135",
        },
    },
    "SHOW_BACK_BUTTON": True,
    
    "SIDEBAR": {
        "show_search": True,
        "navigation": [
            # All users dashboard
            {
                "items": [
                    {
                        "title": _("Dashboard"),
                        "icon": "home",
                        "link": reverse_lazy("admin:index"),
                    },
                ]
            },
            # Super user settings
            {
                "title": _("User Settings"),
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": _("Users"),
                        "icon": "people",
                        "link": reverse_lazy("admin:accounts_user_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Groups"),
                        "icon": "groups",
                        "link": reverse_lazy("admin:auth_group_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                ],
            },
            # Super user settings
            {
                "title": _("Chatbots and Subscriptions"),
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": _("Chatbot"),
                        "icon": "message",
                        "link": reverse_lazy("admin:chatbots_chatbot_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Chatbot Customization"),
                        "icon": "sliders",
                        "link": reverse_lazy("admin:chatbots_chatbotcustomization_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Available Subscriptions"),
                        "icon": "badge",
                        "link": reverse_lazy("admin:subscriptions_subscription_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("User Subscriptions"),
                        "icon": "bookmark",
                        "link": reverse_lazy("admin:subscriptions_usersubscription_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Payment Transactions"),
                        "icon": "payment",
                        "link": reverse_lazy("admin:subscriptions_paymenttransaction_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                ],
            },
            {
                "title": _("Celery Tasks"),
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": _("Task Result"),
                        "icon": "info",
                        "link": reverse_lazy("admin:django_celery_results_taskresult_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Clocked"),
                        "icon": "schedule",
                        "link": reverse_lazy("admin:django_celery_beat_clockedschedule_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Crontabs"),
                        "icon": "event",
                        "link": reverse_lazy("admin:django_celery_beat_crontabschedule_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Intervals"),
                        "icon": "repeat",
                        "link": reverse_lazy("admin:django_celery_beat_intervalschedule_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Periodic Tasks"),
                        "icon": "alarm",
                        "link": reverse_lazy("admin:django_celery_beat_periodictask_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Solar Events"),
                        "icon": "light",
                        "link": reverse_lazy("admin:django_celery_beat_solarschedule_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                ],
            },
            # User Settings
            {
                "items": [
                    {
                        "title": _("My Chatbots"),
                        "icon": "message",
                        "link": reverse_lazy("admin:chatbots_chatbot_changelist"),
                        "permission": lambda request: not request.user.is_superuser,
                    },
                    {
                        "title": _("Chatbot Customization"),
                        "icon": "sliders",
                        "link": reverse_lazy("admin:chatbots_chatbotcustomization_changelist"),
                        "permission": lambda request: not request.user.is_superuser,
                    },
                    {
                        "title": _("Available Subscriptions"),
                        "icon": "badge",
                        "link": reverse_lazy("admin:subscriptions_subscription_changelist"),
                        "permission": lambda request: not request.user.is_superuser,
                    },
                    {
                        "title": _("My Subscriptions"),
                        "icon": "bookmark",
                        "link": reverse_lazy("admin:subscriptions_usersubscription_changelist"),
                        "permission": lambda request: not request.user.is_superuser,
                    },
                    {
                        "title": _("Payment Transactions"),
                        "icon": "payment",
                        "link": reverse_lazy("admin:subscriptions_paymenttransaction_changelist"),
                        "permission": lambda request: not request.user.is_superuser,
                    },
                ]
            },
        ],
    },
    "STYLES": [
        lambda request: static("css/styles.css"),
    ],
    "SCRIPTS": [
        lambda request: static("js/scripts.js"),
    ],
    "DASHBOARD_CALLBACK": "core.views.dashboard_callback",
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'  # URL for static files in the browser

# This is where static files are collected to when you run 'collectstatic'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# This is for any static files you are manually adding to the project during development
STATICFILES_DIRS = [BASE_DIR / "static"]

MEDIA_URL = '/media/'

# The filesystem path where media files will be stored
MEDIA_ROOT = BASE_DIR / 'media'
LOGIN_REDIRECT_URL = '/dashboard/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Razorpay configs
RAZORPAY_KEY_ID = 'rzp_test_CdMtTWPBOCMLTH'
RAZORPAY_SECRET_ID = 'mLltOTxfAcB7AdJhYYAzYqSt'

BASE_URL = 'http://localhost:8000'

# Celery setup
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_ENABLE_UTC = True
CELERY_TIMEZONE = 'UTC'

# dirs
CHROMA_STORE_DIR = 'chroma_store'
TEMP_DIR = 'temps'
os.makedirs(CHROMA_STORE_DIR, exist_ok=True)
os.makedirs(TEMP_DIR, exist_ok=True)

# API keys and models
GEMINI_API_KEY = 'AIzaSyCxQOEEj1YWE7SaP1tMG3Ug_jwqYPIJpZI'
GEMINI_MODEL_NAME = 'gemini-2.0-flash'
EMBEDINGS_MODEL_NAME = 'all-MiniLM-L6-v2'
